# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
 
    runs-on: windows-latest
 
    steps:
    - uses: actions/checkout@v1
      name: Checkout Code
      with:
        submodules: recursive
            
    - name: Set Version
      run: echo ::set-env name=RELEASE_VERSION::$(echo ${{ github.ref }})
            
    - name: Update Assembly version
      shell: powershell
      run: (Get-Content LostArkLogger\Properties\AssemblyInfo.cs).replace('1.0.0.0', '${{ github.ref }}').replace("refs/tags/v", "") | Set-Content LostArkLogger\Properties\AssemblyInfo.cs
      
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
       
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.6
     
    - name: Restore NuGet Packages
      run: nuget restore LostArkLogger.sln
        
    - name: Build
      run: msbuild LostArkLogger.sln /p:Configuration=Release
      
    - name: Import PFX
      shell: powershell
      run: |
        $pfxCertFilePath = Join-Path -Path $PSScriptRoot -ChildPath "CodeSigningCertificate.pfx"
        Set-Content -Value $([System.Convert]::FromBase64String($env:BASE64_PFX)) -Path $pfxCertFilePath -Encoding Byte
        $codeSigningCert = Import-PfxCertificate -FilePath $pfxCertFilePath -Password $($env:PFX_PASSWORD | ConvertTo-SecureString -AsPlainText -Force) -CertStoreLocation Cert:\CurrentUser\My
      env:
        BASE64_PFX: ${{ secrets.CERTIFICATE }}
        PFX_PASSWORD: ${{ secrets.PASSWORD }}

    - name: Sign exe
      shell: powershell
      run: |
        $codeSigningCert = Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | Select-Object -First 1
        Set-AuthenticodeSignature -Certificate $codeSigningCert -FilePath "bin\Release\DpsMeter.exe" -TimestampServer "http://timestamp.digicert.com"
        
    - name: Upload dll Artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: DpsMeter.exe
        path: bin\Release\DpsMeter.exe

    - name: Add to releases
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          bin\Release\DpsMeter.exe
